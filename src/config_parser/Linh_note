The server block with the listen directive including the default_server parameter has priority over a server block without a server_name.

Here's the priority order:

- server block with a server_name that matches the Host header of the request.
- server block with a listen directive including the default_server parameter.
- server block without a server_name.

So, if a server block is specified with listen 80 default_server;, it will be the default server for requests that do not match any server_name, even if there are other server blocks without a server_name.

In other words, listen 80 default_server; is a more explicit way to set a server block as the default, and it will take precedence over a server block without a server_name.

Command to check your default error page with curl:
curl -k -I https://your-nginx-server/nonexistent-page

CgiHandler:
if request requires CGI handling:
    parse the request
    set up the CGI environment
    execute the CGI script
    if request method is POST:
        send the request body to the script's stdin
    read the script's stdout
    create an HTTP response with the script's output
    send the response to the client


The `PATH_INFO` environment variable is used in the context of CGI scripts to provide extra path information after the script name in the URL. This can be useful for scripts that can handle different resources based on this path information.

However, in your case, the requirement states "Because you won’t call the CGI directly, use the full path as PATH_INFO". This means that instead of using `PATH_INFO` to store extra path information after the script name, you should use it to store the full path of the CGI script itself.

This is likely because your server is set up to handle requests for certain paths (like `/test/cgi-bin`) by executing a corresponding CGI script, rather than directly calling a specific script. The server needs to know the full path of the script to execute it, and storing this path in `PATH_INFO` is a convenient way to pass this information to the part of the server code that handles executing the script.

So, if a request comes in for the URL `/test/cgi-bin/upload.php`, the server would set `PATH_INFO` to the full path of the `upload.php` script, something like `/data/www/test/cgi-bin/upload.php`, before executing the script.


∗ The CGI should be run in the correct directory for relative path file access.

[ When a CGI script is run, it's executed within a certain context on the server. This context includes a current working directory. Any file paths in the CGI script that are relative (i.e., not starting with a `/`) are interpreted relative to this current working directory.

For example, let's say your server's file system looks like this:

```
/
├── server
│   ├── cgi-bin
│   │   └── upload.py
│   └── uploads
└── tmp
```

And let's say `upload.py` contains a line like this:

```python
with open('file.txt', 'w') as f:
    f.write('Hello, world!')
```

The path `'file.txt'` is a relative path. If `upload.py` is run with a current working directory of `/server/cgi-bin`, then `file.txt` will be created at `/server/cgi-bin/file.txt`.

But if `upload.py` is run with a current working directory of `/server/uploads`, then `file.txt` will be created at `/server/uploads/file.txt`.

So, when the specification says "The CGI should be run in the correct directory for relative path file access", it means that you should set the current working directory to the directory where you want relative paths to be resolved to.

In C++, you can change the current working directory using the `chdir` function. For example, to change the current working directory to `/server/uploads` before running a CGI script, you could do:

```cpp
chdir("/server/uploads");
// Now run the CGI script
```

This way, any relative paths in the CGI script will be resolved relative to `/server/uploads`. ]